#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinForms_Connect4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LocalDB")]
	public partial class LocalDBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertTurn(Turn instance);
    partial void UpdateTurn(Turn instance);
    partial void DeleteTurn(Turn instance);
    #endregion
		
		public LocalDBClassesDataContext() : 
				base(global::WinForms_Connect4.Properties.Settings.Default.LocalDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Turn> Turns
		{
			get
			{
				return this.GetTable<Turn>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private int _PlayerId;
		
		private bool _PlayerWon;
		
		private System.Nullable<bool> _GameFinished;
		
		private System.DateTime _StartTime;
		
		private int _TimePlayedSeconds;
		
		private EntitySet<Turn> _Turns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerWonChanging(bool value);
    partial void OnPlayerWonChanged();
    partial void OnGameFinishedChanging(System.Nullable<bool> value);
    partial void OnGameFinishedChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnTimePlayedSecondsChanging(int value);
    partial void OnTimePlayedSecondsChanged();
    #endregion
		
		public Game()
		{
			this._Turns = new EntitySet<Turn>(new Action<Turn>(this.attach_Turns), new Action<Turn>(this.detach_Turns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerWon", DbType="Bit NOT NULL")]
		public bool PlayerWon
		{
			get
			{
				return this._PlayerWon;
			}
			set
			{
				if ((this._PlayerWon != value))
				{
					this.OnPlayerWonChanging(value);
					this.SendPropertyChanging();
					this._PlayerWon = value;
					this.SendPropertyChanged("PlayerWon");
					this.OnPlayerWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameFinished", DbType="Bit")]
		public System.Nullable<bool> GameFinished
		{
			get
			{
				return this._GameFinished;
			}
			set
			{
				if ((this._GameFinished != value))
				{
					this.OnGameFinishedChanging(value);
					this.SendPropertyChanging();
					this._GameFinished = value;
					this.SendPropertyChanged("GameFinished");
					this.OnGameFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePlayedSeconds", DbType="Int NOT NULL")]
		public int TimePlayedSeconds
		{
			get
			{
				return this._TimePlayedSeconds;
			}
			set
			{
				if ((this._TimePlayedSeconds != value))
				{
					this.OnTimePlayedSecondsChanging(value);
					this.SendPropertyChanging();
					this._TimePlayedSeconds = value;
					this.SendPropertyChanged("TimePlayedSeconds");
					this.OnTimePlayedSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Turn", Storage="_Turns", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<Turn> Turns
		{
			get
			{
				return this._Turns;
			}
			set
			{
				this._Turns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Turns(Turn entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Turns(Turn entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Turns")]
	public partial class Turn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GameId;
		
		private bool _IsPlayerTurn;
		
		private int _Played;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(string value);
    partial void OnGameIdChanged();
    partial void OnIsPlayerTurnChanging(bool value);
    partial void OnIsPlayerTurnChanged();
    partial void OnPlayedChanging(int value);
    partial void OnPlayedChanged();
    #endregion
		
		public Turn()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPlayerTurn", DbType="Bit NOT NULL")]
		public bool IsPlayerTurn
		{
			get
			{
				return this._IsPlayerTurn;
			}
			set
			{
				if ((this._IsPlayerTurn != value))
				{
					this.OnIsPlayerTurnChanging(value);
					this.SendPropertyChanging();
					this._IsPlayerTurn = value;
					this.SendPropertyChanged("IsPlayerTurn");
					this.OnIsPlayerTurnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Played", DbType="Int NOT NULL")]
		public int Played
		{
			get
			{
				return this._Played;
			}
			set
			{
				if ((this._Played != value))
				{
					this.OnPlayedChanging(value);
					this.SendPropertyChanging();
					this._Played = value;
					this.SendPropertyChanged("Played");
					this.OnPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Turn", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Turns.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Turns.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(string);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
